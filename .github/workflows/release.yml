name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME=opsbrew
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME=opsbrew.exe
          fi
          go build -ldflags="-s -w" -o $BINARY_NAME .
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT

      - name: Create release archive
        id: archive
        run: |
          BINARY_NAME=${{ steps.build.outputs.binary_name }}
          ARCHIVE_NAME=opsbrew-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ARCHIVE_NAME=opsbrew-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            zip $ARCHIVE_NAME $BINARY_NAME README.md LICENSE
          else
            tar -czf $ARCHIVE_NAME $BINARY_NAME README.md LICENSE
          fi
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.archive.outputs.archive_name }}
          path: ${{ steps.archive.outputs.archive_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            opsbrew-*.tar.gz
            opsbrew-*.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
